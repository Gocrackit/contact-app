{"version":3,"sources":["listContact.js","App.js","serviceWorker.js","index.js"],"names":["ListContacts","className","this","props","contacts","map","contact","key","style","backgroundImage","avatarURL","onClick","onclickDelete","Component","App","state","id","name","handle","deleteContact","setState","currentState","filter","c","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qNAoCeA,E,uKAjCH,IAAD,OAEP,OACE,wBAAIC,UAAU,gBACTC,KAAKC,MAAMC,SAASC,KAAI,SAACC,GAAD,OAEzB,wBAAIC,IAAKD,EAAO,GAAQL,UAAU,qBACjC,yBAAKA,UAAU,iBACdO,MAAO,CACLC,gBAAgB,OAAD,OAASH,EAAQI,UAAjB,QAGhB,yBAAKT,UAAU,mBACpB,2BAAIK,EAAO,MACX,2BAAIA,EAAO,SAEJ,4BAAQK,QAAS,kBAAI,EAAKR,MAAMS,cAAcN,IAAUL,UAAU,kBAAlE,mB,GAjBYY,aC2CZC,E,4MAxCbC,MAAM,CACJX,SAAW,CACT,CACEY,GAAI,QACJC,KAAM,iBACNC,OAAQ,iBACRR,UAAW,mCAEb,CACEM,GAAI,QACJC,KAAM,gBACNC,OAAQ,iBACRR,UAAW,mCAEb,CACEM,GAAI,UACJC,KAAM,mBACNC,OAAQ,mBACRR,UAAW,uC,EAKnBS,cAAgB,SAACb,GACb,EAAKc,UAAS,SAACC,GAAD,MAAmB,CAC/BjB,SAAUiB,EAAajB,SAASkB,QAAO,SAACC,GACtC,OAAOA,EAAEP,KAAOV,EAAQU,W,uDAK5B,OACE,6BACE,kBAAC,EAAD,CAAcZ,SAAUF,KAAKa,MAAMX,SAAUQ,cAAeV,KAAKiB,qB,GAlCvDN,aCQEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.84963fb3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nclass ListContacts extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <ol className='contact-list' >\r\n          {this.props.contacts.map((contact)=>\r\n          (\r\n          <li key={contact[\"id\"]} className='contact-list-item'> \r\n           <div className=\"contact-avatar\" \r\n            style={{\r\n              backgroundImage: `url(${contact.avatarURL})`\r\n          }}>             \r\n             </div>\r\n             <div className='contact-details'>\r\n        <p>{contact['name']}</p>\r\n        <p>{contact['handle']}</p>\r\n               </div> \r\n               <button onClick={()=>this.props.onclickDelete(contact)} className='contact-remove'>\r\n            Remove\r\n          </button>\r\n          </li>\r\n          ))}\r\n          \r\n      </ol>\r\n    )\r\n  }\r\n}\r\n\r\nListContacts.propTypes={\r\n  contacts:PropTypes.array.isRequired,\r\n  onclickDelete: PropTypes.func.isRequired,\r\n}\r\n\r\n\r\nexport default ListContacts","\nimport React, { Component } from 'react'\nimport ListContacts from './listContact'\n\nclass App extends Component {\n  state={\n    contacts : [\n      {\n        id: 'tyler',\n        name: 'Tyler McGinnis',\n        handle: '@tylermcginnis',\n        avatarURL: 'http://localhost:5001/tyler.jpg'\n      },\n      {\n        id: 'karen',\n        name: 'Karen Isgrigg',\n        handle: '@karen_isgrigg',\n        avatarURL: 'http://localhost:5001/karen.jpg'\n      },\n      {\n        id: 'richard',\n        name: 'Richard Kalehoff',\n        handle: '@richardkalehoff',\n        avatarURL: 'http://localhost:5001/richard.jpg'\n      },\n    ] \n  }\n\ndeleteContact = (contact) => {\n    this.setState((currentState) => ({\n      contacts: currentState.contacts.filter((c) => {\n        return c.id !== contact.id\n      })\n    }))\n  }\n  render() {\n    return (\n      <div >\n        <ListContacts contacts={this.state.contacts} onclickDelete={this.deleteContact} />\n      </div>\n    )\n    \n  }\n  \n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}